// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// XENCryptoMintInfo is an auto generated low-level Go binding around an user-defined struct.
type XENCryptoMintInfo struct {
	User       common.Address
	Term       *big.Int
	MaturityTs *big.Int
	Rank       *big.Int
	Amplifier  *big.Int
	EaaRate    *big.Int
}

// XENCryptoStakeInfo is an auto generated low-level Go binding around an user-defined struct.
type XENCryptoStakeInfo struct {
	Term       *big.Int
	MaturityTs *big.Int
	Amount     *big.Int
	Apy        *big.Int
}

// XENCryptoMetaData contains all meta data concerning the XENCrypto contract.
var XENCryptoMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"MintClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rank\",\"type\":\"uint256\"}],\"name\":\"RankClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUTHORS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAYS_IN_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EAA_PM_START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EAA_PM_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EAA_RANK_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GENESIS_RANK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PENALTY_PCT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TERM_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TERM_START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TERM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_AMPLIFIER_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_AMPLIFIER_START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TERM_AMPLIFIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TERM_AMPLIFIER_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_WINDOW_DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XEN_APY_DAYS_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XEN_APY_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XEN_APY_START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XEN_MIN_BURN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XEN_MIN_STAKE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeMinters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimMintReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"other\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pct\",\"type\":\"uint256\"}],\"name\":\"claimMintRewardAndShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"}],\"name\":\"claimMintRewardAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"}],\"name\":\"claimRank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentAMP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEAAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentMaxTerm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rankDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amplifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eaa\",\"type\":\"uint256\"}],\"name\":\"getGrossReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserMint\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rank\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amplifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eaaRate\",\"type\":\"uint256\"}],\"internalType\":\"structXENCrypto.MintInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"internalType\":\"structXENCrypto.StakeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalRank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalXenStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBurns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMints\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rank\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amplifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eaaRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "$82019bc37c5e24280a1f420e64fae36d26$__636d5433e68a6005546118c49190612641565b6040516001600160e01b031960e084901b168152600481019190915260026024820152604401602060405180830381865af4158015611907573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192b9190612778565b9050600061193b866103e8612654565b9050600061194b83898c8561165b565b905060646119598582612641565b611963908361258e565b61196d919061261f565b9b9a5050505050505050505050565b6001600160a01b0382166119d25760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610870565b80600260008282546119e49190612654565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481526000805160206127b2833981519152910160405180910390a35050565b33600090815260096020526040812080546001600160a01b0319168155600181018290556002810182905560038101829055600481018290556005018190556006805491611a7683612667565b9190505550565b6000611a898484611715565b90506000198114611af15781811015611ae45760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610870565b611af18484848403611759565b50505050565b6001600160a01b038316611b5b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610870565b6001600160a01b038216611bbd5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610870565b6001600160a01b03831660009081526020819052604090205481811015611c355760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610870565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290926000805160206127b2833981519152910160405180910390a3611af1565b600082421115611cdc57600061016d611ca2868561258e565b611caf90620f424061258e565b611cb9919061261f565b90506305f5e100611cca828861258e565b611cd4919061261f565b9150506116e2565b506000949350505050565b60006113886005541115611ddf576000611d156116cc611d07600f612135565b6116a561166a600554612135565b6001600160401b031690506000611d2f620151808361258e565b611d3d62015180606461258e565b611d479190612654565b905073__$82019bc37c5e24280a1f420e64fae36d26$__637ae2b5c782611d73620151806103e861258e565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865af4158015611db4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd89190612778565b9250505090565b610bac62015180606461258e565b60405180608001604052808281526020016201518083611e0d919061258e565b611e179042612654565b8152602001838152602001611e2a611fec565b9052336000908152600a602090815260408083208451815591840151600183015583015160028201556060909201516003909201919091556007805491611e708361275f565b91905055508160086000828254611e879190612654565b90915550505050565b6001600160a01b038216611ef05760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610870565b6001600160a01b03821660009081526020819052604090205481811015611f645760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610870565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192916000805160206127b28339815191529101611871565b600080620186a06005546001611fbe919061258e565b611fc8919061261f565b90506064811115611fdb57600091505090565b611fe6816064612641565b91505090565b600080611ffd605a6201518061258e565b6120277f000000000000000000000000000000000000000000000000000000000000000042612641565b612031919061261f565b90508061204060026014612641565b101561204e57600291505090565b611fe6816014612641565b6000806201518061208a7f000000000000000000000000000000000000000000000000000000000000000042612641565b612094919061261f565b9050610bb881101561212d5773__$82019bc37c5e24280a1f420e64fae36d26$__636d5433e66120c683610bb8612641565b6040516001600160e01b031960e084901b168152600481019190915260016024820152604401602060405180830381865af4158015612109573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe69190612778565b600191505090565b6000677fffffffffffffff82111561214c57600080fd5b5060401b90565b60008082600f0b1361216457600080fd5b6000600f83900b600160401b811261217e576040918201911d5b600160201b8112612191576020918201911d5b6201000081126121a3576010918201911d5b61010081126121b4576008918201911d5b601081126121c4576004918201911d5b600481126121d4576002918201911d5b600281126121e3576001820191505b603f19820160401b600f85900b607f8490031b6001603f1b5b60008113156122225790800260ff81901c8281029390930192607f011c9060011d6121fc565b509095945050505050565b6000600f83810b9083900b0260401d60016001607f1b0319811280159061225b575060016001607f1b038113155b61226457600080fd5b9392505050565b600081600f0b60000361227d57600080fd5b600082600f0b604085600f0b901b8161229857612298612609565b05905060016001607f1b0319811280159061225b575060016001607f1b0381131561226457600080fd5b60008082600f0b12156122d457600080fd5b50600f0b60401d90565b6000806122ee620151808461261f565b90506122fc60016007612641565b81111561230c5750606392915050565b60006001600761231d846003612654565b6001901b61232b919061261f565b6123359190612641565b604051637ae2b5c760e01b8152600481018290526063602482015290915073__$82019bc37c5e24280a1f420e64fae36d26$__90637ae2b5c790604401602060405180830381865af415801561238f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e29190612778565b600060208083528351808285015260005b818110156123e0578581018301518582016040015282016123c4565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461241857600080fd5b919050565b6000806040838503121561243057600080fd5b61243983612401565b946020939093013593505050565b60008060006060848603121561245c57600080fd5b61246584612401565b925061247360208501612401565b9150604084013590509250925092565b6000806040838503121561249657600080fd5b50508035926020909101359150565b6000602082840312156124b757600080fd5b61226482612401565b6000602082840312156124d257600080fd5b5035919050565b600080600080608085870312156124ef57600080fd5b5050823594602084013594506040840135936060013592509050565b6000806040838503121561251e57600080fd5b61252783612401565b915061253560208401612401565b90509250929050565b600181811c9082168061255257607f821691505b60208210810361257257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761073157610731612578565b6020808252601590820152744352616e6b3a204e6f206d696e742065786973747360581b604082015260600190565b6020808252818101527f4352616e6b3a204d696e74206d61747572697479206e6f742072656163686564604082015260600190565b634e487b7160e01b600052601260045260246000fd5b60008261263c57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561073157610731612578565b8082018082111561073157610731612578565b60008161267657612676612578565b506000190190565b60208082526014908201527358454e3a2042656c6f77206d696e207374616b6560601b604082015260600190565b60208082526019908201527858454e3a2042656c6f77206d696e207374616b65207465726d60381b604082015260600190565b60208082526019908201527858454e3a2041626f7665206d6178207374616b65207465726d60381b604082015260600190565b60208082526011908201527058454e3a207374616b652065786973747360781b604082015260600190565b60006020828403121561274f57600080fd5b8151801515811461226457600080fd5b60006001820161277157612771612578565b5060010190565b60006020828403121561278a57600080fd5b505191905056fed74752b13281df13701575f3a507e9b1242e0b5fb040143211c481c1fce573a6ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef404d724a61636b4c6576696e20406c62656c79616576206661697263727970746f2e6f7267a2646970667358221220bf7b03bbbcae710fa0c5f3e98930f99d1cf8feb9e3c06165a133c5629c3e200e64736f6c63430008110033",
}

// XENCryptoABI is the input ABI used to generate the binding from.
// Deprecated: Use XENCryptoMetaData.ABI instead.
var XENCryptoABI = XENCryptoMetaData.ABI

// XENCryptoBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use XENCryptoMetaData.Bin instead.
var XENCryptoBin = XENCryptoMetaData.Bin

// DeployXENCrypto deploys a new Ethereum contract, binding an instance of XENCrypto to it.
func DeployXENCrypto(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *XENCrypto, error) {
	parsed, err := XENCryptoMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(XENCryptoBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &XENCrypto{XENCryptoCaller: XENCryptoCaller{contract: contract}, XENCryptoTransactor: XENCryptoTransactor{contract: contract}, XENCryptoFilterer: XENCryptoFilterer{contract: contract}}, nil
}

// XENCrypto is an auto generated Go binding around an Ethereum contract.
type XENCrypto struct {
	XENCryptoCaller     // Read-only binding to the contract
	XENCryptoTransactor // Write-only binding to the contract
	XENCryptoFilterer   // Log filterer for contract events
}

// XENCryptoCaller is an auto generated read-only Go binding around an Ethereum contract.
type XENCryptoCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// XENCryptoTransactor is an auto generated write-only Go binding around an Ethereum contract.
type XENCryptoTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// XENCryptoFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type XENCryptoFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// XENCryptoSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type XENCryptoSession struct {
	Contract     *XENCrypto        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// XENCryptoCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type XENCryptoCallerSession struct {
	Contract *XENCryptoCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// XENCryptoTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type XENCryptoTransactorSession struct {
	Contract     *XENCryptoTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// XENCryptoRaw is an auto generated low-level Go binding around an Ethereum contract.
type XENCryptoRaw struct {
	Contract *XENCrypto // Generic contract binding to access the raw methods on
}

// XENCryptoCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type XENCryptoCallerRaw struct {
	Contract *XENCryptoCaller // Generic read-only contract binding to access the raw methods on
}

// XENCryptoTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type XENCryptoTransactorRaw struct {
	Contract *XENCryptoTransactor // Generic write-only contract binding to access the raw methods on
}

// NewXENCrypto creates a new instance of XENCrypto, bound to a specific deployed contract.
func NewXENCrypto(address common.Address, backend bind.ContractBackend) (*XENCrypto, error) {
	contract, err := bindXENCrypto(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &XENCrypto{XENCryptoCaller: XENCryptoCaller{contract: contract}, XENCryptoTransactor: XENCryptoTransactor{contract: contract}, XENCryptoFilterer: XENCryptoFilterer{contract: contract}}, nil
}

// NewXENCryptoCaller creates a new read-only instance of XENCrypto, bound to a specific deployed contract.
func NewXENCryptoCaller(address common.Address, caller bind.ContractCaller) (*XENCryptoCaller, error) {
	contract, err := bindXENCrypto(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &XENCryptoCaller{contract: contract}, nil
}

// NewXENCryptoTransactor creates a new write-only instance of XENCrypto, bound to a specific deployed contract.
func NewXENCryptoTransactor(address common.Address, transactor bind.ContractTransactor) (*XENCryptoTransactor, error) {
	contract, err := bindXENCrypto(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &XENCryptoTransactor{contract: contract}, nil
}

// NewXENCryptoFilterer creates a new log filterer instance of XENCrypto, bound to a specific deployed contract.
func NewXENCryptoFilterer(address common.Address, filterer bind.ContractFilterer) (*XENCryptoFilterer, error) {
	contract, err := bindXENCrypto(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &XENCryptoFilterer{contract: contract}, nil
}

// bindXENCrypto binds a generic wrapper to an already deployed contract.
func bindXENCrypto(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := XENCryptoMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_XENCrypto *XENCryptoRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _XENCrypto.Contract.XENCryptoCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_XENCrypto *XENCryptoRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _XENCrypto.Contract.XENCryptoTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_XENCrypto *XENCryptoRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _XENCrypto.Contract.XENCryptoTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_XENCrypto *XENCryptoCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _XENCrypto.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_XENCrypto *XENCryptoTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _XENCrypto.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_XENCrypto *XENCryptoTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _XENCrypto.Contract.contract.Transact(opts, method, params...)
}

// AUTHORS is a free data retrieval call binding the contract method 0xba3ec741.
//
// Solidity: function AUTHORS() view returns(string)
func (_XENCrypto *XENCryptoCaller) AUTHORS(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "AUTHORS")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// AUTHORS is a free data retrieval call binding the contract method 0xba3ec741.
//
// Solidity: function AUTHORS() view returns(string)
func (_XENCrypto *XENCryptoSession) AUTHORS() (string, error) {
	return _XENCrypto.Contract.AUTHORS(&_XENCrypto.CallOpts)
}

// AUTHORS is a free data retrieval call binding the contract method 0xba3ec741.
//
// Solidity: function AUTHORS() view returns(string)
func (_XENCrypto *XENCryptoCallerSession) AUTHORS() (string, error) {
	return _XENCrypto.Contract.AUTHORS(&_XENCrypto.CallOpts)
}

// DAYSINYEAR is a free data retrieval call binding the contract method 0x02378932.
//
// Solidity: function DAYS_IN_YEAR() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) DAYSINYEAR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "DAYS_IN_YEAR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DAYSINYEAR is a free data retrieval call binding the contract method 0x02378932.
//
// Solidity: function DAYS_IN_YEAR() view returns(uint256)
func (_XENCrypto *XENCryptoSession) DAYSINYEAR() (*big.Int, error) {
	return _XENCrypto.Contract.DAYSINYEAR(&_XENCrypto.CallOpts)
}

// DAYSINYEAR is a free data retrieval call binding the contract method 0x02378932.
//
// Solidity: function DAYS_IN_YEAR() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) DAYSINYEAR() (*big.Int, error) {
	return _XENCrypto.Contract.DAYSINYEAR(&_XENCrypto.CallOpts)
}

// EAAPMSTART is a free data retrieval call binding the contract method 0x909a2ff6.
//
// Solidity: function EAA_PM_START() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) EAAPMSTART(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "EAA_PM_START")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EAAPMSTART is a free data retrieval call binding the contract method 0x909a2ff6.
//
// Solidity: function EAA_PM_START() view returns(uint256)
func (_XENCrypto *XENCryptoSession) EAAPMSTART() (*big.Int, error) {
	return _XENCrypto.Contract.EAAPMSTART(&_XENCrypto.CallOpts)
}

// EAAPMSTART is a free data retrieval call binding the contract method 0x909a2ff6.
//
// Solidity: function EAA_PM_START() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) EAAPMSTART() (*big.Int, error) {
	return _XENCrypto.Contract.EAAPMSTART(&_XENCrypto.CallOpts)
}

// EAAPMSTEP is a free data retrieval call binding the contract method 0xbcfe394f.
//
// Solidity: function EAA_PM_STEP() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) EAAPMSTEP(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "EAA_PM_STEP")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EAAPMSTEP is a free data retrieval call binding the contract method 0xbcfe394f.
//
// Solidity: function EAA_PM_STEP() view returns(uint256)
func (_XENCrypto *XENCryptoSession) EAAPMSTEP() (*big.Int, error) {
	return _XENCrypto.Contract.EAAPMSTEP(&_XENCrypto.CallOpts)
}

// EAAPMSTEP is a free data retrieval call binding the contract method 0xbcfe394f.
//
// Solidity: function EAA_PM_STEP() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) EAAPMSTEP() (*big.Int, error) {
	return _XENCrypto.Contract.EAAPMSTEP(&_XENCrypto.CallOpts)
}

// EAARANKSTEP is a free data retrieval call binding the contract method 0xf340faed.
//
// Solidity: function EAA_RANK_STEP() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) EAARANKSTEP(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "EAA_RANK_STEP")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EAARANKSTEP is a free data retrieval call binding the contract method 0xf340faed.
//
// Solidity: function EAA_RANK_STEP() view returns(uint256)
func (_XENCrypto *XENCryptoSession) EAARANKSTEP() (*big.Int, error) {
	return _XENCrypto.Contract.EAARANKSTEP(&_XENCrypto.CallOpts)
}

// EAARANKSTEP is a free data retrieval call binding the contract method 0xf340faed.
//
// Solidity: function EAA_RANK_STEP() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) EAARANKSTEP() (*big.Int, error) {
	return _XENCrypto.Contract.EAARANKSTEP(&_XENCrypto.CallOpts)
}

// GENESISRANK is a free data retrieval call binding the contract method 0x1c6f212e.
//
// Solidity: function GENESIS_RANK() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) GENESISRANK(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "GENESIS_RANK")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GENESISRANK is a free data retrieval call binding the contract method 0x1c6f212e.
//
// Solidity: function GENESIS_RANK() view returns(uint256)
func (_XENCrypto *XENCryptoSession) GENESISRANK() (*big.Int, error) {
	return _XENCrypto.Contract.GENESISRANK(&_XENCrypto.CallOpts)
}

// GENESISRANK is a free data retrieval call binding the contract method 0x1c6f212e.
//
// Solidity: function GENESIS_RANK() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) GENESISRANK() (*big.Int, error) {
	return _XENCrypto.Contract.GENESISRANK(&_XENCrypto.CallOpts)
}

// MAXPENALTYPCT is a free data retrieval call binding the contract method 0x0f2e1228.
//
// Solidity: function MAX_PENALTY_PCT() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) MAXPENALTYPCT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "MAX_PENALTY_PCT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXPENALTYPCT is a free data retrieval call binding the contract method 0x0f2e1228.
//
// Solidity: function MAX_PENALTY_PCT() view returns(uint256)
func (_XENCrypto *XENCryptoSession) MAXPENALTYPCT() (*big.Int, error) {
	return _XENCrypto.Contract.MAXPENALTYPCT(&_XENCrypto.CallOpts)
}

// MAXPENALTYPCT is a free data retrieval call binding the contract method 0x0f2e1228.
//
// Solidity: function MAX_PENALTY_PCT() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) MAXPENALTYPCT() (*big.Int, error) {
	return _XENCrypto.Contract.MAXPENALTYPCT(&_XENCrypto.CallOpts)
}

// MAXTERMEND is a free data retrieval call binding the contract method 0xc0c65259.
//
// Solidity: function MAX_TERM_END() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) MAXTERMEND(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "MAX_TERM_END")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXTERMEND is a free data retrieval call binding the contract method 0xc0c65259.
//
// Solidity: function MAX_TERM_END() view returns(uint256)
func (_XENCrypto *XENCryptoSession) MAXTERMEND() (*big.Int, error) {
	return _XENCrypto.Contract.MAXTERMEND(&_XENCrypto.CallOpts)
}

// MAXTERMEND is a free data retrieval call binding the contract method 0xc0c65259.
//
// Solidity: function MAX_TERM_END() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) MAXTERMEND() (*big.Int, error) {
	return _XENCrypto.Contract.MAXTERMEND(&_XENCrypto.CallOpts)
}

// MAXTERMSTART is a free data retrieval call binding the contract method 0x0bfae56b.
//
// Solidity: function MAX_TERM_START() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) MAXTERMSTART(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "MAX_TERM_START")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXTERMSTART is a free data retrieval call binding the contract method 0x0bfae56b.
//
// Solidity: function MAX_TERM_START() view returns(uint256)
func (_XENCrypto *XENCryptoSession) MAXTERMSTART() (*big.Int, error) {
	return _XENCrypto.Contract.MAXTERMSTART(&_XENCrypto.CallOpts)
}

// MAXTERMSTART is a free data retrieval call binding the contract method 0x0bfae56b.
//
// Solidity: function MAX_TERM_START() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) MAXTERMSTART() (*big.Int, error) {
	return _XENCrypto.Contract.MAXTERMSTART(&_XENCrypto.CallOpts)
}

// MINTERM is a free data retrieval call binding the contract method 0xf0604829.
//
// Solidity: function MIN_TERM() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) MINTERM(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "MIN_TERM")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINTERM is a free data retrieval call binding the contract method 0xf0604829.
//
// Solidity: function MIN_TERM() view returns(uint256)
func (_XENCrypto *XENCryptoSession) MINTERM() (*big.Int, error) {
	return _XENCrypto.Contract.MINTERM(&_XENCrypto.CallOpts)
}

// MINTERM is a free data retrieval call binding the contract method 0xf0604829.
//
// Solidity: function MIN_TERM() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) MINTERM() (*big.Int, error) {
	return _XENCrypto.Contract.MINTERM(&_XENCrypto.CallOpts)
}

// REWARDAMPLIFIEREND is a free data retrieval call binding the contract method 0x543d3652.
//
// Solidity: function REWARD_AMPLIFIER_END() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) REWARDAMPLIFIEREND(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "REWARD_AMPLIFIER_END")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// REWARDAMPLIFIEREND is a free data retrieval call binding the contract method 0x543d3652.
//
// Solidity: function REWARD_AMPLIFIER_END() view returns(uint256)
func (_XENCrypto *XENCryptoSession) REWARDAMPLIFIEREND() (*big.Int, error) {
	return _XENCrypto.Contract.REWARDAMPLIFIEREND(&_XENCrypto.CallOpts)
}

// REWARDAMPLIFIEREND is a free data retrieval call binding the contract method 0x543d3652.
//
// Solidity: function REWARD_AMPLIFIER_END() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) REWARDAMPLIFIEREND() (*big.Int, error) {
	return _XENCrypto.Contract.REWARDAMPLIFIEREND(&_XENCrypto.CallOpts)
}

// REWARDAMPLIFIERSTART is a free data retrieval call binding the contract method 0xe81917b4.
//
// Solidity: function REWARD_AMPLIFIER_START() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) REWARDAMPLIFIERSTART(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "REWARD_AMPLIFIER_START")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// REWARDAMPLIFIERSTART is a free data retrieval call binding the contract method 0xe81917b4.
//
// Solidity: function REWARD_AMPLIFIER_START() view returns(uint256)
func (_XENCrypto *XENCryptoSession) REWARDAMPLIFIERSTART() (*big.Int, error) {
	return _XENCrypto.Contract.REWARDAMPLIFIERSTART(&_XENCrypto.CallOpts)
}

// REWARDAMPLIFIERSTART is a free data retrieval call binding the contract method 0xe81917b4.
//
// Solidity: function REWARD_AMPLIFIER_START() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) REWARDAMPLIFIERSTART() (*big.Int, error) {
	return _XENCrypto.Contract.REWARDAMPLIFIERSTART(&_XENCrypto.CallOpts)
}

// SECONDSINDAY is a free data retrieval call binding the contract method 0x61a52a36.
//
// Solidity: function SECONDS_IN_DAY() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) SECONDSINDAY(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "SECONDS_IN_DAY")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SECONDSINDAY is a free data retrieval call binding the contract method 0x61a52a36.
//
// Solidity: function SECONDS_IN_DAY() view returns(uint256)
func (_XENCrypto *XENCryptoSession) SECONDSINDAY() (*big.Int, error) {
	return _XENCrypto.Contract.SECONDSINDAY(&_XENCrypto.CallOpts)
}

// SECONDSINDAY is a free data retrieval call binding the contract method 0x61a52a36.
//
// Solidity: function SECONDS_IN_DAY() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) SECONDSINDAY() (*big.Int, error) {
	return _XENCrypto.Contract.SECONDSINDAY(&_XENCrypto.CallOpts)
}

// TERMAMPLIFIER is a free data retrieval call binding the contract method 0x72475f94.
//
// Solidity: function TERM_AMPLIFIER() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) TERMAMPLIFIER(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "TERM_AMPLIFIER")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TERMAMPLIFIER is a free data retrieval call binding the contract method 0x72475f94.
//
// Solidity: function TERM_AMPLIFIER() view returns(uint256)
func (_XENCrypto *XENCryptoSession) TERMAMPLIFIER() (*big.Int, error) {
	return _XENCrypto.Contract.TERMAMPLIFIER(&_XENCrypto.CallOpts)
}

// TERMAMPLIFIER is a free data retrieval call binding the contract method 0x72475f94.
//
// Solidity: function TERM_AMPLIFIER() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) TERMAMPLIFIER() (*big.Int, error) {
	return _XENCrypto.Contract.TERMAMPLIFIER(&_XENCrypto.CallOpts)
}

// TERMAMPLIFIERTHRESHOLD is a free data retrieval call binding the contract method 0xb21d35f2.
//
// Solidity: function TERM_AMPLIFIER_THRESHOLD() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) TERMAMPLIFIERTHRESHOLD(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "TERM_AMPLIFIER_THRESHOLD")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TERMAMPLIFIERTHRESHOLD is a free data retrieval call binding the contract method 0xb21d35f2.
//
// Solidity: function TERM_AMPLIFIER_THRESHOLD() view returns(uint256)
func (_XENCrypto *XENCryptoSession) TERMAMPLIFIERTHRESHOLD() (*big.Int, error) {
	return _XENCrypto.Contract.TERMAMPLIFIERTHRESHOLD(&_XENCrypto.CallOpts)
}

// TERMAMPLIFIERTHRESHOLD is a free data retrieval call binding the contract method 0xb21d35f2.
//
// Solidity: function TERM_AMPLIFIER_THRESHOLD() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) TERMAMPLIFIERTHRESHOLD() (*big.Int, error) {
	return _XENCrypto.Contract.TERMAMPLIFIERTHRESHOLD(&_XENCrypto.CallOpts)
}

// WITHDRAWALWINDOWDAYS is a free data retrieval call binding the contract method 0xc56f0bab.
//
// Solidity: function WITHDRAWAL_WINDOW_DAYS() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) WITHDRAWALWINDOWDAYS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "WITHDRAWAL_WINDOW_DAYS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WITHDRAWALWINDOWDAYS is a free data retrieval call binding the contract method 0xc56f0bab.
//
// Solidity: function WITHDRAWAL_WINDOW_DAYS() view returns(uint256)
func (_XENCrypto *XENCryptoSession) WITHDRAWALWINDOWDAYS() (*big.Int, error) {
	return _XENCrypto.Contract.WITHDRAWALWINDOWDAYS(&_XENCrypto.CallOpts)
}

// WITHDRAWALWINDOWDAYS is a free data retrieval call binding the contract method 0xc56f0bab.
//
// Solidity: function WITHDRAWAL_WINDOW_DAYS() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) WITHDRAWALWINDOWDAYS() (*big.Int, error) {
	return _XENCrypto.Contract.WITHDRAWALWINDOWDAYS(&_XENCrypto.CallOpts)
}

// XENAPYDAYSSTEP is a free data retrieval call binding the contract method 0x32870fda.
//
// Solidity: function XEN_APY_DAYS_STEP() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) XENAPYDAYSSTEP(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "XEN_APY_DAYS_STEP")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// XENAPYDAYSSTEP is a free data retrieval call binding the contract method 0x32870fda.
//
// Solidity: function XEN_APY_DAYS_STEP() view returns(uint256)
func (_XENCrypto *XENCryptoSession) XENAPYDAYSSTEP() (*big.Int, error) {
	return _XENCrypto.Contract.XENAPYDAYSSTEP(&_XENCrypto.CallOpts)
}

// XENAPYDAYSSTEP is a free data retrieval call binding the contract method 0x32870fda.
//
// Solidity: function XEN_APY_DAYS_STEP() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) XENAPYDAYSSTEP() (*big.Int, error) {
	return _XENCrypto.Contract.XENAPYDAYSSTEP(&_XENCrypto.CallOpts)
}

// XENAPYEND is a free data retrieval call binding the contract method 0x7e7aa62e.
//
// Solidity: function XEN_APY_END() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) XENAPYEND(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "XEN_APY_END")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// XENAPYEND is a free data retrieval call binding the contract method 0x7e7aa62e.
//
// Solidity: function XEN_APY_END() view returns(uint256)
func (_XENCrypto *XENCryptoSession) XENAPYEND() (*big.Int, error) {
	return _XENCrypto.Contract.XENAPYEND(&_XENCrypto.CallOpts)
}

// XENAPYEND is a free data retrieval call binding the contract method 0x7e7aa62e.
//
// Solidity: function XEN_APY_END() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) XENAPYEND() (*big.Int, error) {
	return _XENCrypto.Contract.XENAPYEND(&_XENCrypto.CallOpts)
}

// XENAPYSTART is a free data retrieval call binding the contract method 0xfed74269.
//
// Solidity: function XEN_APY_START() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) XENAPYSTART(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "XEN_APY_START")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// XENAPYSTART is a free data retrieval call binding the contract method 0xfed74269.
//
// Solidity: function XEN_APY_START() view returns(uint256)
func (_XENCrypto *XENCryptoSession) XENAPYSTART() (*big.Int, error) {
	return _XENCrypto.Contract.XENAPYSTART(&_XENCrypto.CallOpts)
}

// XENAPYSTART is a free data retrieval call binding the contract method 0xfed74269.
//
// Solidity: function XEN_APY_START() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) XENAPYSTART() (*big.Int, error) {
	return _XENCrypto.Contract.XENAPYSTART(&_XENCrypto.CallOpts)
}

// XENMINBURN is a free data retrieval call binding the contract method 0x110d7fc2.
//
// Solidity: function XEN_MIN_BURN() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) XENMINBURN(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "XEN_MIN_BURN")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// XENMINBURN is a free data retrieval call binding the contract method 0x110d7fc2.
//
// Solidity: function XEN_MIN_BURN() view returns(uint256)
func (_XENCrypto *XENCryptoSession) XENMINBURN() (*big.Int, error) {
	return _XENCrypto.Contract.XENMINBURN(&_XENCrypto.CallOpts)
}

// XENMINBURN is a free data retrieval call binding the contract method 0x110d7fc2.
//
// Solidity: function XEN_MIN_BURN() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) XENMINBURN() (*big.Int, error) {
	return _XENCrypto.Contract.XENMINBURN(&_XENCrypto.CallOpts)
}

// XENMINSTAKE is a free data retrieval call binding the contract method 0x2a62d966.
//
// Solidity: function XEN_MIN_STAKE() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) XENMINSTAKE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "XEN_MIN_STAKE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// XENMINSTAKE is a free data retrieval call binding the contract method 0x2a62d966.
//
// Solidity: function XEN_MIN_STAKE() view returns(uint256)
func (_XENCrypto *XENCryptoSession) XENMINSTAKE() (*big.Int, error) {
	return _XENCrypto.Contract.XENMINSTAKE(&_XENCrypto.CallOpts)
}

// XENMINSTAKE is a free data retrieval call binding the contract method 0x2a62d966.
//
// Solidity: function XEN_MIN_STAKE() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) XENMINSTAKE() (*big.Int, error) {
	return _XENCrypto.Contract.XENMINSTAKE(&_XENCrypto.CallOpts)
}

// ActiveMinters is a free data retrieval call binding the contract method 0xb4800cdc.
//
// Solidity: function activeMinters() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) ActiveMinters(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "activeMinters")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ActiveMinters is a free data retrieval call binding the contract method 0xb4800cdc.
//
// Solidity: function activeMinters() view returns(uint256)
func (_XENCrypto *XENCryptoSession) ActiveMinters() (*big.Int, error) {
	return _XENCrypto.Contract.ActiveMinters(&_XENCrypto.CallOpts)
}

// ActiveMinters is a free data retrieval call binding the contract method 0xb4800cdc.
//
// Solidity: function activeMinters() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) ActiveMinters() (*big.Int, error) {
	return _XENCrypto.Contract.ActiveMinters(&_XENCrypto.CallOpts)
}

// ActiveStakes is a free data retrieval call binding the contract method 0xed2f2369.
//
// Solidity: function activeStakes() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) ActiveStakes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "activeStakes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ActiveStakes is a free data retrieval call binding the contract method 0xed2f2369.
//
// Solidity: function activeStakes() view returns(uint256)
func (_XENCrypto *XENCryptoSession) ActiveStakes() (*big.Int, error) {
	return _XENCrypto.Contract.ActiveStakes(&_XENCrypto.CallOpts)
}

// ActiveStakes is a free data retrieval call binding the contract method 0xed2f2369.
//
// Solidity: function activeStakes() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) ActiveStakes() (*big.Int, error) {
	return _XENCrypto.Contract.ActiveStakes(&_XENCrypto.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_XENCrypto *XENCryptoCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_XENCrypto *XENCryptoSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _XENCrypto.Contract.Allowance(&_XENCrypto.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _XENCrypto.Contract.Allowance(&_XENCrypto.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_XENCrypto *XENCryptoCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_XENCrypto *XENCryptoSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _XENCrypto.Contract.BalanceOf(&_XENCrypto.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _XENCrypto.Contract.BalanceOf(&_XENCrypto.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_XENCrypto *XENCryptoCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_XENCrypto *XENCryptoSession) Decimals() (uint8, error) {
	return _XENCrypto.Contract.Decimals(&_XENCrypto.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_XENCrypto *XENCryptoCallerSession) Decimals() (uint8, error) {
	return _XENCrypto.Contract.Decimals(&_XENCrypto.CallOpts)
}

// GenesisTs is a free data retrieval call binding the contract method 0xe3af6d0a.
//
// Solidity: function genesisTs() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) GenesisTs(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "genesisTs")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GenesisTs is a free data retrieval call binding the contract method 0xe3af6d0a.
//
// Solidity: function genesisTs() view returns(uint256)
func (_XENCrypto *XENCryptoSession) GenesisTs() (*big.Int, error) {
	return _XENCrypto.Contract.GenesisTs(&_XENCrypto.CallOpts)
}

// GenesisTs is a free data retrieval call binding the contract method 0xe3af6d0a.
//
// Solidity: function genesisTs() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) GenesisTs() (*big.Int, error) {
	return _XENCrypto.Contract.GenesisTs(&_XENCrypto.CallOpts)
}

// GetCurrentAMP is a free data retrieval call binding the contract method 0x99202454.
//
// Solidity: function getCurrentAMP() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) GetCurrentAMP(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "getCurrentAMP")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentAMP is a free data retrieval call binding the contract method 0x99202454.
//
// Solidity: function getCurrentAMP() view returns(uint256)
func (_XENCrypto *XENCryptoSession) GetCurrentAMP() (*big.Int, error) {
	return _XENCrypto.Contract.GetCurrentAMP(&_XENCrypto.CallOpts)
}

// GetCurrentAMP is a free data retrieval call binding the contract method 0x99202454.
//
// Solidity: function getCurrentAMP() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) GetCurrentAMP() (*big.Int, error) {
	return _XENCrypto.Contract.GetCurrentAMP(&_XENCrypto.CallOpts)
}

// GetCurrentAPY is a free data retrieval call binding the contract method 0x962ca496.
//
// Solidity: function getCurrentAPY() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) GetCurrentAPY(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "getCurrentAPY")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentAPY is a free data retrieval call binding the contract method 0x962ca496.
//
// Solidity: function getCurrentAPY() view returns(uint256)
func (_XENCrypto *XENCryptoSession) GetCurrentAPY() (*big.Int, error) {
	return _XENCrypto.Contract.GetCurrentAPY(&_XENCrypto.CallOpts)
}

// GetCurrentAPY is a free data retrieval call binding the contract method 0x962ca496.
//
// Solidity: function getCurrentAPY() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) GetCurrentAPY() (*big.Int, error) {
	return _XENCrypto.Contract.GetCurrentAPY(&_XENCrypto.CallOpts)
}

// GetCurrentEAAR is a free data retrieval call binding the contract method 0x8979c87c.
//
// Solidity: function getCurrentEAAR() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) GetCurrentEAAR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "getCurrentEAAR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentEAAR is a free data retrieval call binding the contract method 0x8979c87c.
//
// Solidity: function getCurrentEAAR() view returns(uint256)
func (_XENCrypto *XENCryptoSession) GetCurrentEAAR() (*big.Int, error) {
	return _XENCrypto.Contract.GetCurrentEAAR(&_XENCrypto.CallOpts)
}

// GetCurrentEAAR is a free data retrieval call binding the contract method 0x8979c87c.
//
// Solidity: function getCurrentEAAR() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) GetCurrentEAAR() (*big.Int, error) {
	return _XENCrypto.Contract.GetCurrentEAAR(&_XENCrypto.CallOpts)
}

// GetCurrentMaxTerm is a free data retrieval call binding the contract method 0x45125715.
//
// Solidity: function getCurrentMaxTerm() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) GetCurrentMaxTerm(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "getCurrentMaxTerm")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentMaxTerm is a free data retrieval call binding the contract method 0x45125715.
//
// Solidity: function getCurrentMaxTerm() view returns(uint256)
func (_XENCrypto *XENCryptoSession) GetCurrentMaxTerm() (*big.Int, error) {
	return _XENCrypto.Contract.GetCurrentMaxTerm(&_XENCrypto.CallOpts)
}

// GetCurrentMaxTerm is a free data retrieval call binding the contract method 0x45125715.
//
// Solidity: function getCurrentMaxTerm() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) GetCurrentMaxTerm() (*big.Int, error) {
	return _XENCrypto.Contract.GetCurrentMaxTerm(&_XENCrypto.CallOpts)
}

// GetGrossReward is a free data retrieval call binding the contract method 0xb0fd1fc2.
//
// Solidity: function getGrossReward(uint256 rankDelta, uint256 amplifier, uint256 term, uint256 eaa) pure returns(uint256)
func (_XENCrypto *XENCryptoCaller) GetGrossReward(opts *bind.CallOpts, rankDelta *big.Int, amplifier *big.Int, term *big.Int, eaa *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "getGrossReward", rankDelta, amplifier, term, eaa)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetGrossReward is a free data retrieval call binding the contract method 0xb0fd1fc2.
//
// Solidity: function getGrossReward(uint256 rankDelta, uint256 amplifier, uint256 term, uint256 eaa) pure returns(uint256)
func (_XENCrypto *XENCryptoSession) GetGrossReward(rankDelta *big.Int, amplifier *big.Int, term *big.Int, eaa *big.Int) (*big.Int, error) {
	return _XENCrypto.Contract.GetGrossReward(&_XENCrypto.CallOpts, rankDelta, amplifier, term, eaa)
}

// GetGrossReward is a free data retrieval call binding the contract method 0xb0fd1fc2.
//
// Solidity: function getGrossReward(uint256 rankDelta, uint256 amplifier, uint256 term, uint256 eaa) pure returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) GetGrossReward(rankDelta *big.Int, amplifier *big.Int, term *big.Int, eaa *big.Int) (*big.Int, error) {
	return _XENCrypto.Contract.GetGrossReward(&_XENCrypto.CallOpts, rankDelta, amplifier, term, eaa)
}

// GetUserMint is a free data retrieval call binding the contract method 0x7010d7a1.
//
// Solidity: function getUserMint() view returns((address,uint256,uint256,uint256,uint256,uint256))
func (_XENCrypto *XENCryptoCaller) GetUserMint(opts *bind.CallOpts) (XENCryptoMintInfo, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "getUserMint")

	if err != nil {
		return *new(XENCryptoMintInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(XENCryptoMintInfo)).(*XENCryptoMintInfo)

	return out0, err

}

// GetUserMint is a free data retrieval call binding the contract method 0x7010d7a1.
//
// Solidity: function getUserMint() view returns((address,uint256,uint256,uint256,uint256,uint256))
func (_XENCrypto *XENCryptoSession) GetUserMint() (XENCryptoMintInfo, error) {
	return _XENCrypto.Contract.GetUserMint(&_XENCrypto.CallOpts)
}

// GetUserMint is a free data retrieval call binding the contract method 0x7010d7a1.
//
// Solidity: function getUserMint() view returns((address,uint256,uint256,uint256,uint256,uint256))
func (_XENCrypto *XENCryptoCallerSession) GetUserMint() (XENCryptoMintInfo, error) {
	return _XENCrypto.Contract.GetUserMint(&_XENCrypto.CallOpts)
}

// GetUserStake is a free data retrieval call binding the contract method 0x16f9c8fd.
//
// Solidity: function getUserStake() view returns((uint256,uint256,uint256,uint256))
func (_XENCrypto *XENCryptoCaller) GetUserStake(opts *bind.CallOpts) (XENCryptoStakeInfo, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "getUserStake")

	if err != nil {
		return *new(XENCryptoStakeInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(XENCryptoStakeInfo)).(*XENCryptoStakeInfo)

	return out0, err

}

// GetUserStake is a free data retrieval call binding the contract method 0x16f9c8fd.
//
// Solidity: function getUserStake() view returns((uint256,uint256,uint256,uint256))
func (_XENCrypto *XENCryptoSession) GetUserStake() (XENCryptoStakeInfo, error) {
	return _XENCrypto.Contract.GetUserStake(&_XENCrypto.CallOpts)
}

// GetUserStake is a free data retrieval call binding the contract method 0x16f9c8fd.
//
// Solidity: function getUserStake() view returns((uint256,uint256,uint256,uint256))
func (_XENCrypto *XENCryptoCallerSession) GetUserStake() (XENCryptoStakeInfo, error) {
	return _XENCrypto.Contract.GetUserStake(&_XENCrypto.CallOpts)
}

// GlobalRank is a free data retrieval call binding the contract method 0x1c244082.
//
// Solidity: function globalRank() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) GlobalRank(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "globalRank")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GlobalRank is a free data retrieval call binding the contract method 0x1c244082.
//
// Solidity: function globalRank() view returns(uint256)
func (_XENCrypto *XENCryptoSession) GlobalRank() (*big.Int, error) {
	return _XENCrypto.Contract.GlobalRank(&_XENCrypto.CallOpts)
}

// GlobalRank is a free data retrieval call binding the contract method 0x1c244082.
//
// Solidity: function globalRank() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) GlobalRank() (*big.Int, error) {
	return _XENCrypto.Contract.GlobalRank(&_XENCrypto.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_XENCrypto *XENCryptoCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_XENCrypto *XENCryptoSession) Name() (string, error) {
	return _XENCrypto.Contract.Name(&_XENCrypto.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_XENCrypto *XENCryptoCallerSession) Name() (string, error) {
	return _XENCrypto.Contract.Name(&_XENCrypto.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_XENCrypto *XENCryptoCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_XENCrypto *XENCryptoSession) Symbol() (string, error) {
	return _XENCrypto.Contract.Symbol(&_XENCrypto.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_XENCrypto *XENCryptoCallerSession) Symbol() (string, error) {
	return _XENCrypto.Contract.Symbol(&_XENCrypto.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_XENCrypto *XENCryptoSession) TotalSupply() (*big.Int, error) {
	return _XENCrypto.Contract.TotalSupply(&_XENCrypto.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) TotalSupply() (*big.Int, error) {
	return _XENCrypto.Contract.TotalSupply(&_XENCrypto.CallOpts)
}

// TotalXenStaked is a free data retrieval call binding the contract method 0x069612a5.
//
// Solidity: function totalXenStaked() view returns(uint256)
func (_XENCrypto *XENCryptoCaller) TotalXenStaked(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "totalXenStaked")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalXenStaked is a free data retrieval call binding the contract method 0x069612a5.
//
// Solidity: function totalXenStaked() view returns(uint256)
func (_XENCrypto *XENCryptoSession) TotalXenStaked() (*big.Int, error) {
	return _XENCrypto.Contract.TotalXenStaked(&_XENCrypto.CallOpts)
}

// TotalXenStaked is a free data retrieval call binding the contract method 0x069612a5.
//
// Solidity: function totalXenStaked() view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) TotalXenStaked() (*big.Int, error) {
	return _XENCrypto.Contract.TotalXenStaked(&_XENCrypto.CallOpts)
}

// UserBurns is a free data retrieval call binding the contract method 0xce653d5f.
//
// Solidity: function userBurns(address ) view returns(uint256)
func (_XENCrypto *XENCryptoCaller) UserBurns(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "userBurns", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UserBurns is a free data retrieval call binding the contract method 0xce653d5f.
//
// Solidity: function userBurns(address ) view returns(uint256)
func (_XENCrypto *XENCryptoSession) UserBurns(arg0 common.Address) (*big.Int, error) {
	return _XENCrypto.Contract.UserBurns(&_XENCrypto.CallOpts, arg0)
}

// UserBurns is a free data retrieval call binding the contract method 0xce653d5f.
//
// Solidity: function userBurns(address ) view returns(uint256)
func (_XENCrypto *XENCryptoCallerSession) UserBurns(arg0 common.Address) (*big.Int, error) {
	return _XENCrypto.Contract.UserBurns(&_XENCrypto.CallOpts, arg0)
}

// UserMints is a free data retrieval call binding the contract method 0xdf282331.
//
// Solidity: function userMints(address ) view returns(address user, uint256 term, uint256 maturityTs, uint256 rank, uint256 amplifier, uint256 eaaRate)
func (_XENCrypto *XENCryptoCaller) UserMints(opts *bind.CallOpts, arg0 common.Address) (struct {
	User       common.Address
	Term       *big.Int
	MaturityTs *big.Int
	Rank       *big.Int
	Amplifier  *big.Int
	EaaRate    *big.Int
}, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "userMints", arg0)

	outstruct := new(struct {
		User       common.Address
		Term       *big.Int
		MaturityTs *big.Int
		Rank       *big.Int
		Amplifier  *big.Int
		EaaRate    *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.User = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Term = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.MaturityTs = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Rank = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.Amplifier = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.EaaRate = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// UserMints is a free data retrieval call binding the contract method 0xdf282331.
//
// Solidity: function userMints(address ) view returns(address user, uint256 term, uint256 maturityTs, uint256 rank, uint256 amplifier, uint256 eaaRate)
func (_XENCrypto *XENCryptoSession) UserMints(arg0 common.Address) (struct {
	User       common.Address
	Term       *big.Int
	MaturityTs *big.Int
	Rank       *big.Int
	Amplifier  *big.Int
	EaaRate    *big.Int
}, error) {
	return _XENCrypto.Contract.UserMints(&_XENCrypto.CallOpts, arg0)
}

// UserMints is a free data retrieval call binding the contract method 0xdf282331.
//
// Solidity: function userMints(address ) view returns(address user, uint256 term, uint256 maturityTs, uint256 rank, uint256 amplifier, uint256 eaaRate)
func (_XENCrypto *XENCryptoCallerSession) UserMints(arg0 common.Address) (struct {
	User       common.Address
	Term       *big.Int
	MaturityTs *big.Int
	Rank       *big.Int
	Amplifier  *big.Int
	EaaRate    *big.Int
}, error) {
	return _XENCrypto.Contract.UserMints(&_XENCrypto.CallOpts, arg0)
}

// UserStakes is a free data retrieval call binding the contract method 0x8da7ad23.
//
// Solidity: function userStakes(address ) view returns(uint256 term, uint256 maturityTs, uint256 amount, uint256 apy)
func (_XENCrypto *XENCryptoCaller) UserStakes(opts *bind.CallOpts, arg0 common.Address) (struct {
	Term       *big.Int
	MaturityTs *big.Int
	Amount     *big.Int
	Apy        *big.Int
}, error) {
	var out []interface{}
	err := _XENCrypto.contract.Call(opts, &out, "userStakes", arg0)

	outstruct := new(struct {
		Term       *big.Int
		MaturityTs *big.Int
		Amount     *big.Int
		Apy        *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Term = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.MaturityTs = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Amount = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Apy = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// UserStakes is a free data retrieval call binding the contract method 0x8da7ad23.
//
// Solidity: function userStakes(address ) view returns(uint256 term, uint256 maturityTs, uint256 amount, uint256 apy)
func (_XENCrypto *XENCryptoSession) UserStakes(arg0 common.Address) (struct {
	Term       *big.Int
	MaturityTs *big.Int
	Amount     *big.Int
	Apy        *big.Int
}, error) {
	return _XENCrypto.Contract.UserStakes(&_XENCrypto.CallOpts, arg0)
}

// UserStakes is a free data retrieval call binding the contract method 0x8da7ad23.
//
// Solidity: function userStakes(address ) view returns(uint256 term, uint256 maturityTs, uint256 amount, uint256 apy)
func (_XENCrypto *XENCryptoCallerSession) UserStakes(arg0 common.Address) (struct {
	Term       *big.Int
	MaturityTs *big.Int
	Amount     *big.Int
	Apy        *big.Int
}, error) {
	return _XENCrypto.Contract.UserStakes(&_XENCrypto.CallOpts, arg0)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_XENCrypto *XENCryptoTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _XENCrypto.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_XENCrypto *XENCryptoSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _XENCrypto.Contract.Approve(&_XENCrypto.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_XENCrypto *XENCryptoTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _XENCrypto.Contract.Approve(&_XENCrypto.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address user, uint256 amount) returns()
func (_XENCrypto *XENCryptoTransactor) Burn(opts *bind.TransactOpts, user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _XENCrypto.contract.Transact(opts, "burn", user, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address user, uint256 amount) returns()
func (_XENCrypto *XENCryptoSession) Burn(user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _XENCrypto.Contract.Burn(&_XENCrypto.TransactOpts, user, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address user, uint256 amount) returns()
func (_XENCrypto *XENCryptoTransactorSession) Burn(user common.Address, amount *big.Int) (*types.Transaction, error) {
	return _XENCrypto.Contract.Burn(&_XENCrypto.TransactOpts, user, amount)
}

// ClaimMintReward is a paid mutator transaction binding the contract method 0x52c7f8dc.
//
// Solidity: function claimMintReward() returns()
func (_XENCrypto *XENCryptoTransactor) ClaimMintReward(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _XENCrypto.contract.Transact(opts, "claimMintReward")
}

// ClaimMintReward is a paid mutator transaction binding the contract method 0x52c7f8dc.
//
// Solidity: function claimMintReward() returns()
func (_XENCrypto *XENCryptoSession) ClaimMintReward() (*types.Transaction, error) {
	return _XENCrypto.Contract.ClaimMintReward(&_XENCrypto.TransactOpts)
}

// ClaimMintReward is a paid mutator transaction binding the contract method 0x52c7f8dc.
//
// Solidity: function claimMintReward() returns()
func (_XENCrypto *XENCryptoTransactorSession) ClaimMintReward() (*types.Transaction, error) {
	return _XENCrypto.Contract.ClaimMintReward(&_XENCrypto.TransactOpts)
}

// ClaimMintRewardAndShare is a paid mutator transaction binding the contract method 0x1c560305.
//
// Solidity: function claimMintRewardAndShare(address other, uint256 pct) returns()
func (_XENCrypto *XENCryptoTransactor) ClaimMintRewardAndShare(opts *bind.TransactOpts, other common.Address, pct *big.Int) (*types.Transaction, error) {
	return _XENCrypto.contract.Transact(opts, "claimMintRewardAndShare", other, pct)
}

// ClaimMintRewardAndShare is a paid mutator transaction binding the contract method 0x1c560305.
//
// Solidity: function claimMintRewardAndShare(address other, uint256 pct) returns()
func (_XENCrypto *XENCryptoSession) ClaimMintRewardAndShare(other common.Address, pct *big.Int) (*types.Transaction, error) {
	return _XENCrypto.Contract.ClaimMintRewardAndShare(&_XENCrypto.TransactOpts, other, pct)
}

// ClaimMintRewardAndShare is a paid mutator transaction binding the contract method 0x1c560305.
//
// Solidity: function claimMintRewardAndShare(address other, uint256 pct) returns()
func (_XENCrypto *XENCryptoTransactorSession) ClaimMintRewardAndShare(other common.Address, pct *big.Int) (*types.Transaction, error) {
	return _XENCrypto.Contract.ClaimMintRewardAndShare(&_XENCrypto.TransactOpts, other, pct)
}

// ClaimMintRewardAndStake is a paid mutator transaction binding the contract method 0x5bccb4c4.
//
// Solidity: function claimMintRewardAndStake(uint256 pct, uint256 term) returns()
func (_XENCrypto *XENCryptoTransactor) ClaimMintRewardAndStake(opts *bind.TransactOpts, pct *big.Int, term *big.Int) (*types.Transaction, error) {
	return _XENCrypto.contract.Transact(opts, "claimMintRewardAndStake", pct, term)
}

// ClaimMintRewardAndStake is a paid mutator transaction binding the contract method 0x5bccb4c4.
//
// Solidity: function claimMintRewardAndStake(uint256 pct, uint256 term) returns()
func (_XENCrypto *XENCryptoSession) ClaimMintRewardAndStake(pct *big.Int, term *big.Int) (*types.Transaction, error) {
	return _XENCrypto.Contract.ClaimMintRewardAndStake(&_XENCrypto.TransactOpts, pct, term)
}

// ClaimMintRewardAndStake is a paid mutator transaction binding the contract method 0x5bccb4c4.
//
// Solidity: function claimMintRewardAndStake(uint256 pct, uint256 term) returns()
func (_XENCrypto *XENCryptoTransactorSession) ClaimMintRewardAndStake(pct *big.Int, term *big.Int) (*types.Transaction, error) {
	return _XENCrypto.Contract.ClaimMintRewardAndStake(&_XENCrypto.TransactOpts, pct, term)
}

// ClaimRank is a paid mutator transaction binding the contract method 0x9ff054df.
//
// Solidity: function claimRank(uint256 term) returns()
func (_XENCrypto *XENCryptoTransactor) ClaimRank(opts *bind.TransactOpts, term *big.Int) (*types.Transaction, error) {
	return _XENCrypto.contract.Transact(opts, "claimRank", term)
}

// ClaimRank is a paid mutator transaction binding the contract method 0x9ff054df.
//
// Solidity: function claimRank(uint256 term) returns()
func (_XENCrypto *XENCryptoSession) ClaimRank(term *big.Int) (*types.Transaction, error) {
	return _XENCrypto.Contract.ClaimRank(&_XENCrypto.TransactOpts, term)
}

// ClaimRank is a paid mutator transaction binding the contract method 0x9ff054df.
//
// Solidity: function claimRank(uint256 term) returns()
func (_XENCrypto *XENCryptoTransactorSession) ClaimRank(term *big.Int) (*types.Transaction, error) {
	return _XENCrypto.Contract.ClaimRank(&_XENCrypto.TransactOpts, term)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_XENCrypto *XENCryptoTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _XENCrypto.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_XENCrypto *XENCryptoSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _XENCrypto.Contract.DecreaseAllowance(&_XENCrypto.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_XENCrypto *XENCryptoTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _XENCrypto.Contract.DecreaseAllowance(&_XENCrypto.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_XENCrypto *XENCryptoTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _XENCrypto.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_XENCrypto *XENCryptoSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _XENCrypto.Contract.IncreaseAllowance(&_XENCrypto.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_XENCrypto *XENCryptoTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _XENCrypto.Contract.IncreaseAllowance(&_XENCrypto.TransactOpts, spender, addedValue)
}

// Stake is a paid mutator transaction binding the contract method 0x7b0472f0.
//
// Solidity: function stake(uint256 amount, uint256 term) returns()
func (_XENCrypto *XENCryptoTransactor) Stake(opts *bind.TransactOpts, amount *big.Int, term *big.Int) (*types.Transaction, error) {
	return _XENCrypto.contract.Transact(opts, "stake", amount, term)
}

// Stake is a paid mutator transaction binding the contract method 0x7b0472f0.
//
// Solidity: function stake(uint256 amount, uint256 term) returns()
func (_XENCrypto *XENCryptoSession) Stake(amount *big.Int, term *big.Int) (*types.Transaction, error) {
	return _XENCrypto.Contract.Stake(&_XENCrypto.TransactOpts, amount, term)
}

// Stake is a paid mutator transaction binding the contract method 0x7b0472f0.
//
// Solidity: function stake(uint256 amount, uint256 term) returns()
func (_XENCrypto *XENCryptoTransactorSession) Stake(amount *big.Int, term *big.Int) (*types.Transaction, error) {
	return _XENCrypto.Contract.Stake(&_XENCrypto.TransactOpts, amount, term)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_XENCrypto *XENCryptoTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _XENCrypto.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_XENCrypto *XENCryptoSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _XENCrypto.Contract.Transfer(&_XENCrypto.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_XENCrypto *XENCryptoTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _XENCrypto.Contract.Transfer(&_XENCrypto.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_XENCrypto *XENCryptoTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _XENCrypto.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_XENCrypto *XENCryptoSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _XENCrypto.Contract.TransferFrom(&_XENCrypto.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_XENCrypto *XENCryptoTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _XENCrypto.Contract.TransferFrom(&_XENCrypto.TransactOpts, from, to, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_XENCrypto *XENCryptoTransactor) Withdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _XENCrypto.contract.Transact(opts, "withdraw")
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_XENCrypto *XENCryptoSession) Withdraw() (*types.Transaction, error) {
	return _XENCrypto.Contract.Withdraw(&_XENCrypto.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_XENCrypto *XENCryptoTransactorSession) Withdraw() (*types.Transaction, error) {
	return _XENCrypto.Contract.Withdraw(&_XENCrypto.TransactOpts)
}

// XENCryptoApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the XENCrypto contract.
type XENCryptoApprovalIterator struct {
	Event *XENCryptoApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *XENCryptoApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(XENCryptoApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(XENCryptoApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *XENCryptoApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *XENCryptoApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// XENCryptoApproval represents a Approval event raised by the XENCrypto contract.
type XENCryptoApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_XENCrypto *XENCryptoFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*XENCryptoApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _XENCrypto.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &XENCryptoApprovalIterator{contract: _XENCrypto.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_XENCrypto *XENCryptoFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *XENCryptoApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _XENCrypto.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(XENCryptoApproval)
				if err := _XENCrypto.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_XENCrypto *XENCryptoFilterer) ParseApproval(log types.Log) (*XENCryptoApproval, error) {
	event := new(XENCryptoApproval)
	if err := _XENCrypto.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// XENCryptoMintClaimedIterator is returned from FilterMintClaimed and is used to iterate over the raw logs and unpacked data for MintClaimed events raised by the XENCrypto contract.
type XENCryptoMintClaimedIterator struct {
	Event *XENCryptoMintClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *XENCryptoMintClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(XENCryptoMintClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(XENCryptoMintClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *XENCryptoMintClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *XENCryptoMintClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// XENCryptoMintClaimed represents a MintClaimed event raised by the XENCrypto contract.
type XENCryptoMintClaimed struct {
	User         common.Address
	RewardAmount *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterMintClaimed is a free log retrieval operation binding the contract event 0xd74752b13281df13701575f3a507e9b1242e0b5fb040143211c481c1fce573a6.
//
// Solidity: event MintClaimed(address indexed user, uint256 rewardAmount)
func (_XENCrypto *XENCryptoFilterer) FilterMintClaimed(opts *bind.FilterOpts, user []common.Address) (*XENCryptoMintClaimedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _XENCrypto.contract.FilterLogs(opts, "MintClaimed", userRule)
	if err != nil {
		return nil, err
	}
	return &XENCryptoMintClaimedIterator{contract: _XENCrypto.contract, event: "MintClaimed", logs: logs, sub: sub}, nil
}

// WatchMintClaimed is a free log subscription operation binding the contract event 0xd74752b13281df13701575f3a507e9b1242e0b5fb040143211c481c1fce573a6.
//
// Solidity: event MintClaimed(address indexed user, uint256 rewardAmount)
func (_XENCrypto *XENCryptoFilterer) WatchMintClaimed(opts *bind.WatchOpts, sink chan<- *XENCryptoMintClaimed, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _XENCrypto.contract.WatchLogs(opts, "MintClaimed", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(XENCryptoMintClaimed)
				if err := _XENCrypto.contract.UnpackLog(event, "MintClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMintClaimed is a log parse operation binding the contract event 0xd74752b13281df13701575f3a507e9b1242e0b5fb040143211c481c1fce573a6.
//
// Solidity: event MintClaimed(address indexed user, uint256 rewardAmount)
func (_XENCrypto *XENCryptoFilterer) ParseMintClaimed(log types.Log) (*XENCryptoMintClaimed, error) {
	event := new(XENCryptoMintClaimed)
	if err := _XENCrypto.contract.UnpackLog(event, "MintClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// XENCryptoRankClaimedIterator is returned from FilterRankClaimed and is used to iterate over the raw logs and unpacked data for RankClaimed events raised by the XENCrypto contract.
type XENCryptoRankClaimedIterator struct {
	Event *XENCryptoRankClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *XENCryptoRankClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(XENCryptoRankClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(XENCryptoRankClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *XENCryptoRankClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *XENCryptoRankClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// XENCryptoRankClaimed represents a RankClaimed event raised by the XENCrypto contract.
type XENCryptoRankClaimed struct {
	User common.Address
	Term *big.Int
	Rank *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRankClaimed is a free log retrieval operation binding the contract event 0xe9149e1b5059238baed02fa659dbf4bd932fbcf760a431330df4d934bc942f37.
//
// Solidity: event RankClaimed(address indexed user, uint256 term, uint256 rank)
func (_XENCrypto *XENCryptoFilterer) FilterRankClaimed(opts *bind.FilterOpts, user []common.Address) (*XENCryptoRankClaimedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _XENCrypto.contract.FilterLogs(opts, "RankClaimed", userRule)
	if err != nil {
		return nil, err
	}
	return &XENCryptoRankClaimedIterator{contract: _XENCrypto.contract, event: "RankClaimed", logs: logs, sub: sub}, nil
}

// WatchRankClaimed is a free log subscription operation binding the contract event 0xe9149e1b5059238baed02fa659dbf4bd932fbcf760a431330df4d934bc942f37.
//
// Solidity: event RankClaimed(address indexed user, uint256 term, uint256 rank)
func (_XENCrypto *XENCryptoFilterer) WatchRankClaimed(opts *bind.WatchOpts, sink chan<- *XENCryptoRankClaimed, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _XENCrypto.contract.WatchLogs(opts, "RankClaimed", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(XENCryptoRankClaimed)
				if err := _XENCrypto.contract.UnpackLog(event, "RankClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRankClaimed is a log parse operation binding the contract event 0xe9149e1b5059238baed02fa659dbf4bd932fbcf760a431330df4d934bc942f37.
//
// Solidity: event RankClaimed(address indexed user, uint256 term, uint256 rank)
func (_XENCrypto *XENCryptoFilterer) ParseRankClaimed(log types.Log) (*XENCryptoRankClaimed, error) {
	event := new(XENCryptoRankClaimed)
	if err := _XENCrypto.contract.UnpackLog(event, "RankClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// XENCryptoStakedIterator is returned from FilterStaked and is used to iterate over the raw logs and unpacked data for Staked events raised by the XENCrypto contract.
type XENCryptoStakedIterator struct {
	Event *XENCryptoStaked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *XENCryptoStakedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(XENCryptoStaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(XENCryptoStaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *XENCryptoStakedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *XENCryptoStakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// XENCryptoStaked represents a Staked event raised by the XENCrypto contract.
type XENCryptoStaked struct {
	User   common.Address
	Amount *big.Int
	Term   *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterStaked is a free log retrieval operation binding the contract event 0x1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90.
//
// Solidity: event Staked(address indexed user, uint256 amount, uint256 term)
func (_XENCrypto *XENCryptoFilterer) FilterStaked(opts *bind.FilterOpts, user []common.Address) (*XENCryptoStakedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _XENCrypto.contract.FilterLogs(opts, "Staked", userRule)
	if err != nil {
		return nil, err
	}
	return &XENCryptoStakedIterator{contract: _XENCrypto.contract, event: "Staked", logs: logs, sub: sub}, nil
}

// WatchStaked is a free log subscription operation binding the contract event 0x1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90.
//
// Solidity: event Staked(address indexed user, uint256 amount, uint256 term)
func (_XENCrypto *XENCryptoFilterer) WatchStaked(opts *bind.WatchOpts, sink chan<- *XENCryptoStaked, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _XENCrypto.contract.WatchLogs(opts, "Staked", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(XENCryptoStaked)
				if err := _XENCrypto.contract.UnpackLog(event, "Staked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStaked is a log parse operation binding the contract event 0x1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90.
//
// Solidity: event Staked(address indexed user, uint256 amount, uint256 term)
func (_XENCrypto *XENCryptoFilterer) ParseStaked(log types.Log) (*XENCryptoStaked, error) {
	event := new(XENCryptoStaked)
	if err := _XENCrypto.contract.UnpackLog(event, "Staked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// XENCryptoTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the XENCrypto contract.
type XENCryptoTransferIterator struct {
	Event *XENCryptoTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *XENCryptoTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(XENCryptoTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(XENCryptoTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *XENCryptoTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *XENCryptoTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// XENCryptoTransfer represents a Transfer event raised by the XENCrypto contract.
type XENCryptoTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_XENCrypto *XENCryptoFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*XENCryptoTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _XENCrypto.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &XENCryptoTransferIterator{contract: _XENCrypto.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_XENCrypto *XENCryptoFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *XENCryptoTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _XENCrypto.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(XENCryptoTransfer)
				if err := _XENCrypto.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_XENCrypto *XENCryptoFilterer) ParseTransfer(log types.Log) (*XENCryptoTransfer, error) {
	event := new(XENCryptoTransfer)
	if err := _XENCrypto.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// XENCryptoWithdrawnIterator is returned from FilterWithdrawn and is used to iterate over the raw logs and unpacked data for Withdrawn events raised by the XENCrypto contract.
type XENCryptoWithdrawnIterator struct {
	Event *XENCryptoWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *XENCryptoWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(XENCryptoWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(XENCryptoWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *XENCryptoWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *XENCryptoWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// XENCryptoWithdrawn represents a Withdrawn event raised by the XENCrypto contract.
type XENCryptoWithdrawn struct {
	User   common.Address
	Amount *big.Int
	Reward *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdrawn is a free log retrieval operation binding the contract event 0x92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc6.
//
// Solidity: event Withdrawn(address indexed user, uint256 amount, uint256 reward)
func (_XENCrypto *XENCryptoFilterer) FilterWithdrawn(opts *bind.FilterOpts, user []common.Address) (*XENCryptoWithdrawnIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _XENCrypto.contract.FilterLogs(opts, "Withdrawn", userRule)
	if err != nil {
		return nil, err
	}
	return &XENCryptoWithdrawnIterator{contract: _XENCrypto.contract, event: "Withdrawn", logs: logs, sub: sub}, nil
}

// WatchWithdrawn is a free log subscription operation binding the contract event 0x92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc6.
//
// Solidity: event Withdrawn(address indexed user, uint256 amount, uint256 reward)
func (_XENCrypto *XENCryptoFilterer) WatchWithdrawn(opts *bind.WatchOpts, sink chan<- *XENCryptoWithdrawn, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _XENCrypto.contract.WatchLogs(opts, "Withdrawn", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(XENCryptoWithdrawn)
				if err := _XENCrypto.contract.UnpackLog(event, "Withdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawn is a log parse operation binding the contract event 0x92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc6.
//
// Solidity: event Withdrawn(address indexed user, uint256 amount, uint256 reward)
func (_XENCrypto *XENCryptoFilterer) ParseWithdrawn(log types.Log) (*XENCryptoWithdrawn, error) {
	event := new(XENCryptoWithdrawn)
	if err := _XENCrypto.contract.UnpackLog(event, "Withdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
